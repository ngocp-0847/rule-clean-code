#!/bin/bash

# Pre-commit hook to check PHP files for coding standards violations
# Place this file in .git/hooks/pre-commit and make it executable

# Set colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}PHP CodeSniffer Pre-Commit Hook${NC}"

# Get list of PHP files staged for commit
STAGED_PHP_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.php$')

# Exit if no PHP files are staged
if [ -z "$STAGED_PHP_FILES" ]; then
    echo -e "${GREEN}No PHP files staged for commit.${NC}"
    exit 0
fi

# Path to PHP_CodeSniffer
PHPCS_BIN=$(which phpcs)
if [ -z "$PHPCS_BIN" ]; then
    echo -e "${RED}PHP_CodeSniffer not found in PATH.${NC}"
    echo -e "${YELLOW}Install it with: composer global require 'squizlabs/php_codesniffer=*'${NC}"
    exit 1
fi

# Check coding standards for staged files
echo -e "${YELLOW}Checking coding standards for staged PHP files...${NC}"
echo "$STAGED_PHP_FILES" | xargs $PHPCS_BIN --standard=php-config

# If phpcs returns an error code, exit with error
if [ $? -ne 0 ]; then
    echo -e "${RED}Coding standards violations detected!${NC}"
    echo -e "${YELLOW}You can fix automatically fixable issues with:${NC}"
    echo -e "${YELLOW}./php-config/fix-code.sh <file-path>${NC}"
    echo -e "${YELLOW}Or run your commit with --no-verify to bypass this check.${NC}"
    exit 1
fi

echo -e "${GREEN}No coding standards violations found.${NC}"
exit 0
